;-*- unibyte: t; coding: iso-8859-1; -*-

;;;; Copyright (C) 2011 Mag. Christian Tanzer All rights reserved
;;;; Glasauergasse 32, A--1130 Wien, Austria. tanzer@swing.co.at
;;;; ****************************************************************************
;;;; This file is part of the LS-Emacs.
;;;;
;;;; This file is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This file is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this file. If not, see <http://www.gnu.org/licenses/>.
;;;; ****************************************************************************
;;;;
;;;;++
;;;; Name
;;;;    lse-language-javascript
;;;;
;;;; Purpose
;;;;    Define LSE language javascript
;;;;
;;;; Revision Dates
;;;;    18-Jan-2011 (CT) Creation
;;;;    19-Jan-2011 (CT) Creation continued
;;;;    20-Jan-2011 (CT) Creation continued..
;;;;    ««revision-date»»···
;;;;--

;;; 18-Jan-2011
(lse-language:define "javascript"
    '(
        (lse-language:initial-fill-in      "««js-root»»")
        (lse-language:tab-increment        2)
        (lse_comment_delim_char_set        "/*")
        (lse_comment_head_delim            "/\\*\\|^ *\\*\\*")
        (lse_comment_head_delim_pattern
          "/\\*\\(\\+\\|-\\|\\*\\)* *\\|^ *\\*\\*+ *"
        )
        (lse_comment_tail_delim            "\\*/")
        (lse_comment_tail_delim_pattern    " *\\*+/")
        (lse-tpu:ident-group-chars         "$_")
     )
    '(
        lse-tpu:toggle-newline-and-indent
        auto-fill-mode
     )
    '(
        "lse-templates-c-base"
        "lse-templates-javascript"
        "lse-templates-javascript-jquery"
     )
    137
     67
;;; javascript
)

(load-library "javascript")

(fset 'lse-js:std-js-mode (symbol-function 'javascript-mode))
;;; 18-Jan-2011
(defvar lse-js:keymap (make-sparse-keymap))

;;; 19-Jan-2011
(defvar lse-js:menu-keymap (make-sparse-keymap "JS")
  "Menu keymap for javascript-mode of LS-Emacs"
)

;;; 18-Jan-2011
(defun javascript-mode ()
  "Major mode for editing JavaScript source text."
  (interactive)
  (lse-js:std-js-mode)
  (use-local-map lse-js:keymap)
  (local-set-key [menu-bar lse-js] (cons "JS" lse-js:menu-keymap))
  (local-set-smk [red ?{]  'lse-js:goto-block-head)
  (local-set-smk [red ?}]  'lse-js:goto-block-tail)
  (local-set-smk [red ?\;] 'lse-js:goto-semicolon)
  ;;; XXX key bindings for functions like goto-beginning-of-def,
  ;;;     goto-begin-of-block, ...
  (setq mode-name "JS")
  (setq comment-start      "/* ")
  (setq comment-end        " */")
  (setq comment-start-skip "/\\*+ *")
  (make-local-variable 'require-final-newline)
  (setq require-final-newline t)
  (setq indent-line-function 'lse-indent-line)
  (lse-language:use "javascript")
; javascript-mode
)

;;; 19-Jan-2011
(defun lse-js:goto-block-head (&optional limit)
  (interactive)
  (let ((lse-tpu:search-dir lse-tpu:search-dir-reverse))
    (save-match-data
      (lse-tpu:search+goto "{" limit)
    )
  )
; lse-js:goto-block-head
)

;;; 19-Jan-2011
(defun lse-js:goto-block-tail (&optional limit)
  (interactive)
  (save-match-data
    (lse-tpu:search+goto "}" limit)
    (lse-tpu:forward-char 1)
  )
; lse-js:goto-block-tail
)

;;; 19-Jan-2011
(defun lse-js:catch-semicolon ()
  "Remove whitespace to immediately following semicolon, if any."
  (interactive "*")
  (save-excursion
    (let ((cp (point-marker)))
      (skip-chars-forward " \t\n")
      (if (looking-at ";")
          (progn
            (delete-region cp (point))
            (forward-char 1)
            (lse-js:remove-semicolon)
          )
      )
    )
  )
; lse-js:catch-semicolon
)

;;; 19-Jan-2011
(defun lse-js:goto-semicolon (&optional limit)
  "Goto next semicolon."
  (interactive)
  (save-match-data (lse-tpu:search+goto ";" limit))
; lse-js:goto-semicolon
)

;;; 19-Jan-2011
(defun lse-js:remove-semicolon ()
  "Remove next semicolon."
  (interactive "*")
  (save-excursion
    (let ((cp (point-marker)))
      (skip-chars-forward " \t\n")
      (if (looking-at ";")
          (progn
            (skip-chars-forward " \t;")
            (delete-region cp (point))
          )
      )
    )
  )
; lse-js:remove-semicolon
)

(define-key lse-js:menu-keymap [remove-semicolon]
  '("Remove semicolon" . lse-js:remove-semicolon)
)

(define-key lse-js:menu-keymap [goto-semicolon]
  '("Goto semicolon" . lse-js:goto-semicolon)
)

(define-key lse-js:menu-keymap [goto-block-tail]
  '("Goto end of block" . lse-js:goto-block-tail)
)

(define-key lse-js:menu-keymap [goto-block-head]
  '("Goto start of block" . lse-js:goto-block-head)
)

;;;; helper functions for templates

;;; 20-Jan-2011
(defun lse-js:indent-function-literal ()
  (let* ((after-comma
           (save-excursion
             (lse-tpu:previous-line 1) (lse-line-startswith " *, \\w+ *: *")
           )
         )
         ;; if expansion happens in a line starting with a `,`, e.g., inside an
         ;; object literal, then increase indentation
         (shift (if after-comma 1 0)
        )
       )
    (lse-prev-indent shift)
  )
; lse-js:indent-function-literal
)

;;; 20-Jan-2011
(defun lse-js:indent-object-literal ()
  (if (lse-line-startswith " *[(,] *$")
      (lse-anchor-indent 2) ; don't want a newline directly after a `(` or ","
    (let ((shift
            (if (lse-line-startswith " *\\(,\\|\\(( *\\)*{\\) \\w+ *: *") 2 1)
          )
         )
      ;; if expansion happens in a line starting with a `,`, e.g., inside an
      ;; object literal, then increase indentation
      (lse-newline)
      (lse-prev-indent shift)
    )
  )
; lse-js:indent-object-literal
)

;;;; __END__ lse-language-javascript.lse
