;-*- coding: utf-8 -*-

;;;; Copyright (C) 2011-2012 Mag. Christian Tanzer All rights reserved
;;;; Glasauergasse 32, A--1130 Wien, Austria. tanzer@swing.co.at
;;;; ****************************************************************************
;;;; This file is part of the LS-Emacs.
;;;;
;;;; This file is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This file is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this file. If not, see <http://www.gnu.org/licenses/>.
;;;; ****************************************************************************
;;;;
;;;;++
;;;; Name
;;;;    lse-language-javascript
;;;;
;;;; Purpose
;;;;    Define LSE language javascript
;;;;
;;;; Revision Dates
;;;;    18-Jan-2011 (CT) Creation
;;;;    19-Jan-2011 (CT) Creation continued
;;;;    20-Jan-2011 (CT) Creation continued..
;;;;    23-Jan-2011 (CT) Creation continued...
;;;;    24-Jan-2011 (CT) Creation continued....
;;;;    28-Jan-2011 (CT) `lse-js:indent-line` added as `indent-line-function`
;;;;    28-Jan-2011 (CT) `lse-js:fix-semicolon` added
;;;;    10-Mar-2011 (CT) `lse-js:indent-function-literal` changed to consider
;;;;                     `,`, too
;;;;    17-Feb-2012 (CT) Add `lse-js:goto-function-head` and friends
;;;;    17-Feb-2012 (CT) Add `(imenu-add-to-menubar "IM-JS")`
;;;;    18-Feb-2012 (CT) Factor `lse-js:goto-function-head...` to lse-tpu
;;;;    19-Feb-2012 (CT) Use `local-set-asp` instead of `local-set-smk`
;;;;    ««revision-date»»···
;;;;--

;;; 18-Jan-2011
(lse-language:define "javascript"
    '(
        (lse-language:initial-fill-in      "««js-root»»")
        (lse-language:tab-increment        4)
        (lse-comment:delim_char_set        "/*")
        (lse-comment:head_delim            "//")
        (lse-comment:head_delim_pattern    "// *")
        (lse-tpu:ident-group-chars         "$_")
     )
    '(
        lse-tpu:toggle-newline-and-indent
        auto-fill-mode
     )
    '(
        "lse-templates-c-base"
        "lse-templates-javascript"
        "lse-templates-javascript-array"
        "lse-templates-javascript-string"
        "lse-templates-javascript-events"
        "lse-templates-javascript-jquery"
     )
    137
     67
;;; javascript
)

(load-library "javascript")

(fset 'lse-js:std-js-mode (symbol-function 'javascript-mode))
;;; 18-Jan-2011
(defvar lse-js:keymap (make-sparse-keymap))

;;; 19-Jan-2011
(defvar lse-js:menu-keymap (make-sparse-keymap "JS")
  "Menu keymap for javascript-mode of LS-Emacs"
)

(defvar lse-js:function-pat "\\<function\\>")

;;; 18-Jan-2011
(defun javascript-mode ()
  "Major mode for editing JavaScript source text."
  (interactive)
  (lse-js:std-js-mode)
  (use-local-map lse-js:keymap)
  (local-set-key [menu-bar lse-js] (cons "JS" lse-js:menu-keymap))
  (local-set-asp [M-up]          'lse-tpu:goto-stmt-block-head)
  (local-set-asp [M-down]        'lse-tpu:goto-stmt-block-tail)
  (local-set-asp [red   ?a]      'lse-tpu:goto-function-head)
  (local-set-asp [green ?a]      'lse-tpu:goto-function-tail)
  (local-set-asp [red   ?e]      'lse-tpu:goto-function-tail)
  (local-set-asp [red   ?i]      'lse-tpu:goto-nearest-function-head)
  (local-set-asp [red   up]      'lse-tpu:goto-stmt-block-head)
  (local-set-asp [green up]      'lse-tpu:goto-stmt-block-tail)
  (local-set-asp [red   down]    'lse-tpu:goto-stmt-block-tail)
  (local-set-asp [red   left]    'backward-up-list)
  (local-set-asp [red   right]   'up-list)
  (setq mode-name "JS")
  (setq comment-start      "/* ")
  (setq comment-end        " */")
  (setq comment-start-skip "/\\*+ *")
  (make-local-variable 'require-final-newline)
  (setq require-final-newline t)
  (setq indent-line-function 'lse-js:indent-line)
  (lse-language:use "javascript")
  (imenu-add-to-menubar "IM-JS")
; javascript-mode
)

;;; 28-Jan-2011
(defun lse-js:indent-line ()
  (interactive "*")
  (if (lse-line-endswith "(\\|{\\|\\[" 1 1)
      (let ((shift (if (looking-at ")\\|}\\|\\]") 0 1)))
        (indent-to
          (+ (lse-indent:level:prev) (* shift lse-language:tab-increment))
        )
      )
    (if (lse-line-endswith ":\\|=" 1 1)
        (indent-to (+ (lse-indent:level:prev) lse-language:tab-increment))
      (lse-indent-line)
    )
  )
; lse-js:indent-line
)

;;; 19-Jan-2011
(defun lse-js:catch-semicolon ()
  "Remove whitespace to immediately following semicolon, if any."
  (interactive "*")
  (save-excursion
    (let ((cp (point-marker)))
      (skip-chars-forward " \t\n")
      (if (looking-at ";")
          (progn
            (delete-region cp (point))
            (forward-char 1)
            (lse-js:remove-semicolon)
          )
      )
    )
  )
; lse-js:catch-semicolon
)

;;; 23-Jan-2011
(defun lse-js:clean-closing (closer)
  (if (looking-at closer)
      (delete-char (length closer))
  )
; lse-js:clean-closing
)

;;; 28-Jan-2011
(defun lse-js:fix-semicolon ()
  (interactive "*")
  (let ((cp (point-marker))
        behind-brace
       )
    (save-excursion
      (skip-chars-backward "; \t\n")
      (if (progn (backward-char 1) (setq behind-brace (looking-at "}")))
          (progn
            (delete-region (1+ (point)) cp)
            (lse-js:remove-semicolon)
            (if (looking-at "\\w") (insert " "))
          )
      )
    )
    (unless behind-brace
      (insert ";")
      (lse-js:catch-semicolon)
    )
  )
; lse-js:fix-semicolon
)

;;; 22-Jan-2011
(defun lse-js:remove-period ()
  "Remove prev period."
  (interactive "*")
  (save-excursion
    (let ((cp (point-marker)))
      (skip-chars-backward " \t\n")
      (if (progn (backward-char 1) (looking-at "\\."))
          (delete-region (point) cp)
      )
    )
  )
; lse-js:remove-period
)

;;; 19-Jan-2011
(defun lse-js:remove-semicolon (&optional both-directions)
  "Remove next semicolon."
  (interactive "*")
  (save-excursion
    (if both-directions (skip-chars-backward "; \t\n"))
    (let ((cp (point-marker)))
      (skip-chars-forward " \t\n")
      (while (looking-at ";")
          (progn
            (skip-chars-forward " \t;")
            (delete-region cp (point))
            (skip-chars-forward " \t\n")
          )
      )
    )
  )
; lse-js:remove-semicolon
)

(define-key lse-js:menu-keymap [remove-semicolon]
  '("Remove semicolon" . lse-js:remove-semicolon)
)

(define-key lse-js:menu-keymap [goto-block-tail]
  '("Goto end of block" . lse-tpu:goto-stmt-block-tail)
)

(define-key lse-js:menu-keymap [goto-block-head]
  '("Goto start of block" . lse-tpu:goto-stmt-block-head)
)

(define-key lse-js:menu-keymap [goto-function-tail]
  '("Goto end of current function" . lse-tpu:goto-function-tail)
)

(define-key lse-js:menu-keymap [goto-function-head]
  '("Goto start of current function" . lse-tpu:goto-function-head)
)

(define-key lse-js:menu-keymap [goto-nearest-function-head]
  '("Goto nearest start of function" . lse-tpu:goto-nearest-function-head)
)

;;;; helper functions for templates

;;; 20-Jan-2011
(defun lse-js:indent-function-literal ()
  (cond ((or
           (lse-line-startswith " *var ")
           (lse-line-startswith " *return ")
         )
         (lse-indent:set:prev 0)
        )
        ((lse-line-startswith " *[?:] [(] ")
         (lse-indent:set (+ (lse-indent:level:prev 0) 4))
        )
        ((lse-line-startswith " *[?:{,] ")
         (lse-indent:set (+ (lse-indent:level:prev 0) 2))
        )
        (t
         (let* ((after-comma
                  (save-excursion
                    (lse-tpu:previous-line 1)
                    (lse-line-startswith " *, \\w+ *: *")
                  )
                )
               )
           (lse-indent:set (lse-indent:level:prev 0))
           ;; if expansion happens in a line starting with a `,`, e.g.,
           ;; inside an object literal, then increase indentation
           (and after-comma (lse-indent:> 1))
         )
        )
  )
; lse-js:indent-function-literal
)

;;; 20-Jan-2011
(defun lse-js:indent-object-literal ()
  (cond ((or
           (lse-line-startswith " *[(,] *$")
           (lse-line-startswith " *return *;* *$"); avoid JS's semicolon insertion
         )
         (lse-anchor-indent 2) ; don't want a newline directly after a `(`...
        )
        ((lse-line-startswith " *$")
         (lse-indent:set (lse-indent::shift 1 nil))
        )
        (t
         (let ((shift
                 (if (lse-line-startswith " *\\(,\\|\\(( *\\)*{\\) \\w+ *: *")
                     2
                   1
                 )
               )
              )
           ;; if expansion happens in a line starting with a `,`, e.g.,
           ;; inside an object literal, then increase indentation
           (lse-newline)
           (lse-prev-indent shift)
         )
        )
  )
; lse-js:indent-object-literal
)

;;;; __END__ lse-language-javascript.lse
