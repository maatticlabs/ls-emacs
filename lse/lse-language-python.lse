;-*- coding: iso-8859-15; -*-

;;;; Copyright (C) 1998-2012 Mag. Christian Tanzer. All rights reserved.
;;;; Glasauergasse 32, A--1130 Wien, Austria. tanzer.co.at

;;;; ****************************************************************************
;;;; This file is part of LS-Emacs, a package built on top of GNU Emacs.
;;;;
;;;; Like GNU Emacs, LS-Emacs is free software; you can redistribute it
;;;; and/or modify it under the terms of the GNU General Public License as
;;;; published by the Free Software Foundation; either version 2 of the
;;;; License, or (at your option) any later version.
;;;;
;;;; This program is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this program; if not, write to the Free Software
;;;; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
;;;; ****************************************************************************
;;;;
;;;;++
;;;; Name
;;;;    lse-language-python
;;;;
;;;; Purpose
;;;;    Define characteristics of LSE language python
;;;;
;;;; Revision Dates
;;;;     3-Jan-1998 (CT) Creation
;;;;     2-Mar-1998 (CT) lse-python-mode added
;;;;    13-Apr-1998 (CT) lse-python:goto-beginning-of-class added
;;;;     3-Aug-1998 (CT) Added `+' to python-mode's `comment-start' and
;;;;                     `comment-start-skip'
;;;;     4-Aug-1998 (CT) Patch `imenu-example--python-class-regexp' and
;;;;                     `imenu-example--python-method-regexp'
;;;;     8-Aug-1998 (CT) Patch removed
;;;;    31-Mar-1999 (CT) `lse-templates-python-lib' added
;;;;     7-Apr-1999 (CT) `lse-templates-python-re' and friends added
;;;;    24-Sep-1999 (CT) `lse-python:save-position' and friends added
;;;;    24-Sep-1999 (CT) `lse-python:goto-begin-of-block' added
;;;;     6-Jun-2000 (CT) `lse-python:goto-begin-of-block' changed to go to
;;;;                     `if' when on `else'
;;;;     8-Sep-2002 (CT) `lse-python:goto-next-statement` and
;;;;                     `lse-python:goto-prev-statement` added
;;;;     8-Sep-2002 (CT) `red gold` bindings added
;;;;    18-Nov-2002 (CT) `red` cursor bindings added
;;;;    18-Nov-2002 (CT) `lse-python:goto-next-statement-end` and
;;;;                     `lse-python:goto-prev-statement-end` added
;;;;    20-Nov-2002 (CT)  s/lse-python-mode/python-mode/ and call saved
;;;;                      `lse:python-mode:std-python-mode` from there
;;;;     4-Mar-2003 (CT) `lse-templates-python-TOM` and
;;;;                     `lse-templates-python-TTA` added
;;;;    17-Aug-2006 (CT) Disable local binding for `f1`
;;;;     4-Oct-2007 (CT) Use `lse-tpu:next-end-of-line` instead of
;;;;                     `lse-tpu:end-of-line`
;;;;     4-Oct-2007 (CT) `lse-python:update-patchlevel` added and bound to
;;;;                     `[red ?v]`
;;;;     4-Oct-2007 (CT) `extras` added to `lse-python:update-patchlevel`
;;;;     5-Oct-2007 (CT) `lse-python:update-patchlevel-many` and
;;;;                     `lse-python:update-patchlevel-one` added
;;;;    25-Oct-2007 (CT) `lse-python:update-patchlevel` changed to check
;;;;                     `verify-visited-file-modtime`
;;;;    30-Aug-2010 (CT) `lse-python:goto-near-top-pos` added
;;;;    10-Nov-2010 (CT) Use `mapc` instead of `mapcar` where appropriate
;;;;    18-Feb-2012 (CT) Factor `last-position` to `lse-tpu`
;;;;    19-Feb-2012 (CT) Use `local-set-asp` instead of `local-set-smk`
;;;;    24-Feb-2012 (CT) Redefine `py-imenu-class-regexp` and
;;;;                     `py-imenu-method-regexp` to support continuation lines
;;;;    24-Feb-2012 (CT) Rename `goto-beginning-of-class` to
;;;;                     `goto-nearest-class-head`...
;;;;    24-Feb-2012 (CT) Add `lse-python:goto-class-head` and friends
;;;;    24-Feb-2012 (CT) Revamp py-menu (to put in lse-python definitions)
;;;;    ««revision-date»»···
;;;;--

(lse-language:define "python"
    '(
        (lse-language:initial-fill-in      "««python-root»»")
        (lse-language:tab-increment        4)
        (lse_comment_delim_char_set        "#")
        (lse_comment_head_delim            "#")
        (lse_comment_head_delim_pattern    "#+ *")
        (lse-tpu:ident-group-chars         "_")
     )
    '(
        ;; lse-tpu:toggle-newline-and-indent
        auto-fill-mode
     )
    '(
        "lse-templates-python"
        "lse-templates-python-MOM"
     )
    137
     67
;;; python
)

(require 'lse-tpu)

(defvar py-imenu-class-regexp
  (concat                               ; <<classes>>
   "\\("                                ;
   "^[ \t]*"                            ; newline and maybe whitespace
   "\\(class[ \t]+[a-zA-Z0-9_]+\\)"     ; class name

   ;; CT: elide detail here that breaks in case of continuation lines
   ;; "\\([ \t]*\\((\\([a-zA-Z0-9_,. \t\n]\\)*)\\)?\\)" ; this is from python-mode 5.2.0
   "\\(\\(\\([^:#]*\\)\\)\\)"

   "\\)"                                ; >>classes<<
   )
  "Regexp for Python classes for use with the Imenu package."
  )

(defvar py-imenu-method-regexp
  (concat                               ; <<methods and functions>>
   "\\("                                ;
   "^[ \t]*"                            ; new line and maybe whitespace
   "\\(def[ \t]+"                       ; function definitions start with def
   "\\([a-zA-Z0-9_]+\\)"                ;   name is here

   ;; CT: elide detail here that breaks in case of continuation lines
   ;; "[ \t]*(\\([^:#]*\\))"            ; this is from python-mode 5.2.0
   "[ \t]*\\([^:#]*\\))"

   "\\)"                                ; end of def
   "\\)"                                ; >>methods and functions<<
   )
  "Regexp for Python methods/functions for use with the Imenu package."
  )

(require 'python-mode)

(fset 'lse:python-mode:std-python-mode (symbol-function 'python-mode))

(defun python-mode ()
  (interactive)
  (lse:python-mode:std-python-mode)
  (setq comment-start      "#+ " )
  (setq comment-start-skip "#+ *")
  (local-unset-key "\177")
  ;; revert ``extremely bad form'' of python-mode rebindings of
  ;; 'newline-and-indent and 'py-newline-and-indent
  (mapc
    #'(lambda (key) (local-unset-key key))
    (where-is-internal 'newline-and-indent)
  )
  (mapc
    #'(lambda (key) (local-unset-key key))
    (where-is-internal 'py-newline-and-indent)
  )

  ;; 17-Aug-2006
  (local-unset-key [f1]); disable broken py-doc binding

  ;; move some local key bindings to local C-c keymap
  ;; (lse-move-keys-to-prefix (current-local-map) [?\C-c] [?:])
  ;; 9-Apr-1998
  (local-unset-key [?:]); cannot move to [\C-c] because that's already bound

  (local-set-asp   [red      ?a]     'lse-python:goto-function-head)
  (local-set-asp   [pink     ?a]     'lse-python:goto-next-function-head)
  (local-set-asp   [green    ?a]     'lse-python:goto-function-tail)
  (local-set-asp   [red      ?b]     'lse-python:goto-begin-of-block)
  (local-set-asp   [green    ?b]     'lse-python:goto-end-of-block)
  (local-set-asp   [red      ?c]     'lse-python:goto-class-head)
  (local-set-asp   [pink     ?c]     'lse-python:goto-next-class-head)
  (local-set-asp   [green    ?c]     'lse-python:goto-class-tail)
  (local-set-asp   [red      ?d]     'lse-python:goto-nearest-class-head)
  (local-set-asp   [green    ?d]     'lse-python:goto-nearest-class-tail)
  (local-set-asp   [red      ?e]     'lse-python:goto-function-tail)
  (local-set-asp   [red      ?f]     'lse-python:goto-end-of-block)
  (local-set-asp   [red      ?g]     'lse-python:goto-class-tail)
  (local-set-asp   [red      ?i]     'lse-python:goto-nearest-function-head)
  (local-set-asp   [green    ?i]     'lse-python:goto-nearest-function-tail)
  (local-set-asp   [red      ?r]     'lse-python:goto-prev-statement)
  (local-set-asp   [red      ?s]     'lse-python:goto-next-statement)
  (local-set-asp   [green    ?s]     'lse-python:goto-prev-statement)
  (local-set-asp   [red      ?v]     'lse-python:update-patchlevel)
  (local-set-asp   [red   right]     'lse-python:goto-next-statement)
  (local-set-asp   [red   ?\C-e]     'lse-python:goto-next-statement-end)
  (local-set-asp   [red    left]     'lse-python:goto-prev-statement)
  (local-set-asp   [red   ?\C-a]     'lse-python:goto-prev-statement-end)
  (local-set-asp   [red      up]     'lse-python:goto-begin-of-block)
  (local-set-asp   [red    down]     'lse-python:goto-end-of-block)
  (local-set-asp   [red  C-home]     'lse-python:goto-near-top-pos)

  (setq indent-line-function 'lse-python:indent-line)
  (lse-language:use "python")
  (turn-on-font-lock)
; python-mode
)

;;; py-in-literal: returns "string" or "comment" if (point) is inside either

;;;  9-Mar-1998
(defun lse-python:indent-line ()
  (interactive "*")
  (if (or (equal      (char-syntax (following-char)) ?\) )
          (looking-at "[-+*/,]")
      )
       (lse-indent-line)
    (py-indent-line)
  )
; lse-python:indent-line
)

;;; 24-Feb-2012
(defun lse-python:goto_block_head (name)
  (let ((cp (point))
        result
       )
    (beginning-of-line)
    (while (and
            (not (bobp))
            (or
              (looking-at (concat " *" name " "))
              (looking-at (concat " *# end " name))
              (looking-at " *[#@]")
              (looking-at "^ *$")
            )
          )
      (forward-line -1)
    )
    (setq result (py-go-up-tree-to-keyword name))
    (unless result
      (message "No %s statement around point found" name)
      (goto-char cp)
    )
    result
  )
; lse-python:goto_block_head
)

;;; 24-Feb-2012
(defun lse-python:goto_block_tail (name)
  (let ((cp (point))
        block-indent
       )
    (beginning-of-line)
    (if (looking-at (concat " *" name " "))
        (forward-line 1)
      (when (looking-at (concat " *# end " name))
        (forward-line 1)
      )
      (while (looking-at "^ *$")
        (forward-line 1)
      )
    )
    (when (lse-python:goto_block_head name)
      (setq block-indent (current-indentation))
      (py-goto-beyond-block)
      (while (and
               (not (eobp))
               (or
                 (looking-at "^ *$")
                 (> (current-indentation) block-indent)
               )
             )
        (forward-line 1)
      )
    )
  )
; lse-python:goto_block_tail
)

;;; 24-Feb-2012
(defun lse-python:goto-class-head ()
  "Goto head of containing class"
  (interactive)
  (lse-python:goto_block_head "class")
; lse-python:goto-class-head
)

;;; 24-Feb-2012
(defun lse-python:goto-class-tail ()
  "Goto tail of containing class"
  (interactive)
  (lse-python:goto_block_tail "class")
; lse-python:goto-class-tail
)

;;; 24-Feb-2012
(defun lse-python:goto-function-head ()
  "Goto head of containing function"
  (interactive)
  (lse-python:goto_block_head "def")
; lse-python:goto-function-head
)

;;; 24-Feb-2012
(defun lse-python:goto-function-tail ()
  "Goto tail of containing function"
  (interactive)
  (lse-python:goto_block_tail "def")
; lse-python:goto-function-tail
)

;;; 13-Apr-1998
(defun lse-python:goto-nearest-class-head ()
  "Goto nearest head of class."
  (interactive)
  (py-beginning-of-def-or-class t)
; lse-python:goto-nearest-class-head
)

;;; 13-Apr-1998
(defun lse-python:goto-nearest-class-tail ()
  "Goto to nearest tail of class."
  (interactive)
  (py-end-of-def-or-class t)
; lse-python:goto-nearest-class-tail
)

;;; 24-Sep-1999
(defun lse-python:goto-nearest-function-head ()
  "Goto nearest head of function."
  (interactive)
  (py-beginning-of-def-or-class)
; lse-python:goto-nearest-function-head
)

;;; 24-Sep-1999
(defun lse-python:goto-nearest-function-tail ()
  "Goto to nearest tail of function."
  (interactive)
  (py-end-of-def-or-class)
; lse-python:goto-nearest-function-tail
)

;;; 24-Feb-2012
(defun lse-python:goto-next-class-head (count &optional limit)
  "Goto next head of class."
  (interactive "p")
  (lse-tpu:goto_occurrence "^ *class " limit count 're-search-forward t)
; lse-python:goto-next-class-head
)

;;; 24-Feb-2012
(defun lse-python:goto-next-function-head (count &optional limit)
  "Goto next head of function."
  (interactive "p")
  (lse-tpu:goto_occurrence "^ *def " limit count 're-search-forward t)
; lse-python:goto-next-function-head
)

;;; 24-Sep-1999
(defun lse-python:goto-begin-of-block ()
  "Goto begin of current python block"
  (interactive)
  (py-goto-block-up t)
; lse-python:goto-begin-of-block
)

;;; 24-Sep-1999
(defun lse-python:goto-end-of-block ()
  "Got end of current python block"
  (interactive)
  (if (py-statement-opens-block-p)
      t
    (py-goto-block-up t)
  )
  (py-goto-beyond-block)
  (back-to-indentation)            ;  18-Nov-2002
; lse-python:goto-end-of-block
)

;;; 18-Nov-2002
(defun lse-python@goto-next-statement (num)
  (py-next-statement (or num 1))
  (back-to-indentation)
; lse-python@goto-next-statement
)

;;;  8-Sep-2002
(defun lse-python:goto-next-statement (num)
  "Goto next statement"
  (interactive "P")
  (lse-python@goto-next-statement num)
; lse-python:goto-next-statement
)

;;; 18-Nov-2002
(defun lse-python@goto-end-of-last-statement ()
  (lse-tpu:next-end-of-line 0)
  (while (and (save-excursion
                (beginning-of-line)
                (looking-at py-blank-or-comment-re)
              )
              (not (bobp))
         )
    (lse-tpu:next-end-of-line -1)
  )
; lse-python@goto-end-of-last-statement
)

;;; 18-Nov-2002
(defun lse-python:goto-next-statement-end (num)
  "Goto end of current statement"
  (interactive "P")
  (if (eolp)
      (lse-python@goto-next-statement 1)
  )
  (lse-python@goto-next-statement num)
  (lse-python@goto-end-of-last-statement)
; lse-python:goto-next-statement-end
)

;;; 18-Nov-2002
(defun lse-python@goto-prev-statement (num)
  (py-previous-statement (or num (if (py-continuation-line-p) 0 1)))
  (back-to-indentation)
; lse-python@goto-prev-statement
)

;;;  8-Sep-2002
(defun lse-python:goto-prev-statement (num)
  "Goto previous statement"
  (interactive "P")
  (lse-python@goto-prev-statement num)
; lse-python:goto-prev-statement
)

;;; 18-Nov-2002
(defun lse-python:goto-prev-statement-end (num)
  "Goto end of previous statement"
  (interactive  "P")
  (lse-python:goto-prev-statement num)
  (lse-python@goto-end-of-last-statement)
; lse-python:goto-prev-statement-end
)

;;; 30-Aug-2010
(defun lse-python:near-top-pos ()
  (save-excursion
    (save-match-data
      (lse-tpu:move-to-beginning)
      (re-search-forward "^#--")
      (skip-chars-forward " \t\n")
      (if (looking-at "\"\"\"")
          (progn
            (lse-tpu:forward-char 3)
            (re-search-forward "\"\"\"")
            (skip-chars-forward " \t\n")
          )
      )
      (point)
    )
  )
; lse-python:near-top-pos
)

;;; 30-Aug-2010
(defun lse-python:goto-near-top-pos ()
  "Goto position near the top of a Python module."
  (interactive)
  (let ((ntp (lse-python:near-top-pos))) (if ntp (goto-char ntp)))
; lse-python:goto-near-top-pos
)

;;;  4-Oct-2007
(defconst lse-python:patchlevel-pattern
  (concat
    "\\(patchlevel += +\\)"                      ; \\1 patchlevel head
    "\\([0-9]+\\)"                               ; \\2 patchlevel value
    "\\(.*\n?\\)"                                ; \\3 patchlevel tail
    "\\( *, date += \"\\)"                       ; \\3 date       head
    "\\( ?[0-9]+-[A-Z][a-z]+-[0-9]+ ?\\)"        ; \\3 date       value
    "\\(\"\\)"                                   ; \\3 date       tail
  )
)

;;;  4-Oct-2007
(defun lse-python:update-patchlevel ()
  "Update patchlevel/date of a Python Version file."
  (interactive)
  (save-excursion
    (save-match-data
      (if (verify-visited-file-modtime (current-buffer))
          t
        (if (buffer-modified-p (current-buffer))
            (error "Buffer was modified but related file changed on disk")
          (lse-revert-buffer)
        )
      )
      (lse-tpu:move-to-beginning)
      (if (re-search-forward lse-python:patchlevel-pattern (buffer-size) t)
          (let* ((p_head  (match-string-no-properties 1))
                 (p_value (match-string-no-properties 2))
                 (p_tail  (match-string-no-properties 3))
                 (d_head  (match-string-no-properties 4))
                 (d_value (format "%11s " (lse-dd-mmm-yyyy)))
                 (d_tail  (match-string-no-properties 6))
                 (new_pv  (format "%d" (1+ (string-to-number p_value))))
                 (user    (concat "(" (lse-user-initials)  ")"))
                 (rv_tail "")
                 (extras  "")
                )
            (replace-match
              (concat p_head new_pv p_tail d_head d_value d_tail)
            )
            (if (re-search-backward
                  (concat user " \\( +\\)" "Patchlevel +increased to") 0 t
                )
                (setq extras (match-string-no-properties 1))
            )
            (lse-tpu:move-to-beginning)
            (if (re-search-forward
                  (concat "# +" d_value user " +"
                          "Patchlevel +increased to [0-9]+\\(.*\\)\n"
                  )
                  (buffer-size) t
                )
                (progn
                  (setq rv_tail (match-string-no-properties 1))
                  (replace-match "")
                )
            )
            (if (re-search-forward
                  "^#\\( +««revision-date»»···\\|--\\)"(buffer-size) t
                )
                (replace-match
                  (concat
                    "#    " d_value user extras
                      " Patchlevel     increased to " new_pv
                    "\n"
                    (match-string 0)
                  )
                )
            )
            (message "Patchlevel increased to %s" new_pv)
          )
        (message "No patchlevel/date code found.")
      )
    )
  )
; lse-python:update-patchlevel
)

;;;  5-Oct-2007
(defun lse-python:update-patchlevel-many (&rest arg)
  (mapc 'lse-python:update-patchlevel-one arg)
; lse-python:update-patchlevel-many
)

;;;  5-Oct-2007
(defun lse-python:update-patchlevel-one (name)
  (save-excursion
    (if (get-buffer name)
        (progn
          (set-buffer name)
          (lse-python:update-patchlevel)
        )
      (message "No buffer named `%s` exists" name)
    )
  )
; lse-python:update-patchlevel-one
)

;;; Setup python menu for menu bar

;; remove Python menu defined by std-python-mode
(define-key py-mode-map [menu-bar Python] nil)

;; define Python menu with bindings to lse-python functions
;;; 24-Feb-2012
(defvar lse-python:menu:class-spec
  ( list
    "-"
    ["Goto start of containing class"  lse-python:goto-class-head            t]
    ["Goto end of containing class"    lse-python:goto-class-tail            t]
    ["Go up to start of nearest class" lse-python:goto-nearest-class-head    t]
    ["Goto to end of nearest class"    lse-python:goto-nearest-class-tail    t]
    ["Goto start of next class"        lse-python:goto-next-class-head       t]
  )
  "Specification for class-specific Python menu"
)

;;; 24-Feb-2012
(defvar lse-python:menu:function-spec
  ( list
    "-"
    ["Goto start of containing def"    lse-python:goto-function-head         t]
    ["Goto end of containing def"      lse-python:goto-function-tail         t]
    ["Go up to start of nearest def"   lse-python:goto-nearest-function-head t]
    ["Goto to end of nearest def"      lse-python:goto-nearest-function-tail t]
    ["Goto start of next def"          lse-python:goto-next-function-head    t]
  )
  "Specification for function-specific Python menu"
)

;;; 24-Feb-2012
(defvar lse-python:menu:block-spec
  ( list
    "-"
    ["Go up to start of block"         lse-python:goto-begin-of-block        t]
    ["Go to end of block"              lse-python:goto-end-of-block          t]
    ["Goto next statement"             lse-python:goto-next-statement        t]
    ["Goto end of next statement"      lse-python:goto-next-statement-end    t]
    ["Goto previous statement"         lse-python:goto-prev-statement        t]
    ["Goto end of previous statement"  lse-python:goto-prev-statement-end    t]

  )
  "Specification for block-specific Python menu"
)

(require 'easymenu)
(easy-menu-define py-menu py-mode-map "Python Mode menu"
  ( append
    ( list "Python"
      ["Goto position near the top" lse-python:goto-near-top-pos t]
      ["Indent current line"        lse-python:indent-line       t]
      "-"
      ["Comment Out Region"   py-comment-region  '(mark)]
      ["Uncomment Region"     (py-comment-region (point) (mark) '(4)) '(mark)]
   )
   lse-python:menu:class-spec
   lse-python:menu:function-spec
   lse-python:menu:block-spec
   nil
  )
)

;;; __END__ lse-language-python.lse

