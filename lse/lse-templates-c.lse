;-*- unibyte: t; coding: iso-8859-1; -*-

(lse-define-fill-in "abort"
  '(token)
  '(description     "generates an abnormal process abort")
  '(replacement     "abort ()")
)

(lse-define-fill-in "Array-Bound"
  '(description   "The number of elements in this dimension")
  '(separator     " ")
  '(leading       "[")
  '(trailing      "]")
  '(replacement   "[«constant-expression»]")
)

(lse-define-fill-in "Array-Bounds"
  '(description   "The number of elements in each dimension")
  '(replacement   "[««constant-expression»»]««array-bound»»···")
)

(lse-define-fill-in "Array-Declarator"
  '(description   "Declares an array of objects of the specified type")
  '(replacement   "«declarator» «Array-Bounds»")
)

(lse-define-fill-in "assert"
  '(token)
  '(description     "Assert a logical condition which must hold at this point")
  '(replacement     "assert («int-expression»);")
)

(lse-define-fill-in "BASE_ACCESS"
  '(description   "Access level of base class")
  '(menu
      ("public"    "Public members of base class remain public")
      ("protected" "Public members of base class become protected")
      ("private"   "Default - inherited members become private")
   )
)

(lse-define-fill-in "block"
  '(token)
  '(token                 "{")
  '(description           "Compound statement")
  '(replacement
    "  {"
    lse-indent+1
    "««statement»»···"
    lse-indent-1
    "  }"
   )
;;; block
)

(lse-define-fill-in "c-data-type"
  '(sort)
  '(menu
      struct
      union
      enum
      char
      int
      float
      double
      void
  )
)

;;; 23-Jan-2002
(lse-define-fill-in "c-declaration"
    '(token)
    '(menu
        object-declaration
        function-prototype-declaration
        typedef
     )
;;; c-declaration
)

;;; 23-Jan-2002
(lse-define-fill-in "c-header-file"
    '(token)
    '(token         "header-file")
    '(description   "LSE-Template for C header file")
    '(replacement
        "/*"
        "**««header-comment»»"
        "*/"
        ""
        "#ifndef _" & lse-insert-buffer-name & "_h"
        "#define _" & lse-insert-buffer-name & "_h 1"
        ""
        @ c-standard-includes
        "««#include»»···"
        ""
        "««c-declaration»»···"
        ""
        "#endif"
     )
;;; c-header-file
)

(lse-define-fill-in "c-keyword"
  '(description     "Keywords in C language")
  '(menu
        ("auto" "Don't use that")
        break
        case
        char
        const
        continue
        default
        do
        double
        else
        enum
        extern
        float
        for
        goto
        if
        int
        long
        ("register"  "Don't use that")
        return
        short
        "signed"
        sizeof
        static
        struct
        switch
        typedef
        union
        "unsigned"
        void
        volatile
        while
  )
;;; c-keyword
)

;;; 23-Jan-2002
(lse-define-fill-in "c-root"
    '(token)
    '(description           "Root fill-in for LSE language C")
    '(menu
        c-header-file
        c-source-file
     )
;;; c-root
)

;;; 23-Jan-2002
(lse-define-fill-in "c-standard-includes"
    '(description           "Include files needed by every module")
    '(replacement
        "#include \"ptypes.h\""
     )
;;; c-standard-includes
)

;;; 23-Jan-2002
(lse-define-fill-in "c-source-file"
    '(token)
    '(token                 "source-file")
    '(description           "LSE-Template for C source-file")
    '(replacement
        "/*"
        "**««header-comment»»"
        "*/"
        ""
        "#include \"" & lse-insert-buffer-name & ".h\""
        "««#include»»···"
        ""
        "««c-declaration»»···"
     )
;;; c-source-file
)

(lse-define-fill-in "char"
  '(token)
  '(description     "Declare a character object")
  '(replacement     "char «declarator-and-initializer»")
)

(lse-define-fill-in "character-constant"
    '(description           "A literal character")
    '(replacement-leading   "'")
    '(replacement-trailer   "'")
;;; character-constant
)

(lse-define-fill-in "const"
    '(token)
    '(description           "Declare an object to be constant")
    '(replacement           "const")
;;; const
)

(lse-define-fill-in "data-member-definition"
  '(token)
  '(token                 "attribute")
  '(description           "Define a data member of a class")
  '(replacement           @ type-definition)
;;; data-member-definition
)

(lse-define-fill-in "data-type"
    '(sort)
    '(menu
        @ c-data-type
     )
;;; data-type
)

(lse-define-fill-in "Declarator"
  '(separator ", ")
  '(menu
      identifier
      "(«declarator»)"
      pointer-declarator
      function-declarator
      array-declarator
  )
)

(lse-define-fill-in "Double"
  '(token)
  '(description     "64 bits Double-precision floating-point variable")
  '(replacement     "double «declarator-and-initializer»")
)

(lse-define-fill-in "Ellipsis"
  '(description     "Denotes a variable length parameter list in a function prototype")
  '(leading         ",")
  '(replacement     " ...")
)

(lse-define-fill-in "enum"
  '(token)
  '(description     "Declaration of an enumeration type")
  '(replacement
      "enum ««enum-name»»"
      lse-indent+1
      "{ ««enumerator-and-value»»···"
      "}"
      lse-indent-1
   )
)

(lse-define-fill-in "enum-name"
    '(description   "Name of an enumeration type")
;;; enum-name
)

(lse-define-fill-in "enumerator"
  '(description     "Name of enumerator-choice")
;;; enumerator
)

(lse-define-fill-in "enumerator-and-value"
  '(separator       lse-newline lse-environment-indent ", ")
  '(leading         ",")
  '(kill-action     lse-kill:join-sexp-boundary-maybe); 31-Dec-1997
  '(replacement     "«enumerator» = ««constant-expression»»")
)

(lse-define-fill-in "Exit"
  '(token)
  '(description     "terminates the invoking process, flushes and closes all files")
  '(replacement     "exit (««int-expression»»)")
)

(lse-define-fill-in "Extern"
  '(token)
  '(description   "Declares an external variable that is defined elsewhere")
  '(replacement
      "extern " & @ type-definition &  ";"
  )
)

(lse-define-fill-in "Float"
  '(token)
  '(description     "single-precision floating-point variable")
  '(replacement     "float «declarator-and-initializer»")
)

(lse-define-fill-in "function-declarator"
  '(description     "Declares a function returning the specified type")
  '(replacement
    "«declarator» (««parameter-declaration»»···)"
  )
)

(lse-define-fill-in "function-name"
  '(description           "Name of a function")
  '(auto-replicate        1)
)

(lse-define-fill-in "function-name-declaration"
  '(replacement
    "««static-or-extern»» " & @ object-type-declaration & " «function-name» "
   )
;;; function-name-declaration
)

;;;  5-Apr-1995
(lse-define-fill-in "function-block"
  '(description           "Compound statement")
  '(replacement
    "{" ;  1-Jan-1998 ; removed leading '  '
    lse-indent+1
    "««statement»»···"
    "««return»»"
    lse-indent-1
    "}" ;  1-Jan-1998 ; removed leading '  '
   )
;;; block
)

(lse-define-fill-in "Function-Definition"
  '(token)
  '(token           "fdef"); 24-Jan-2002
  '(description     "Defines a function")
  '(replacement
      ""
      @ function-name-declaration & "(««parameter-declaration»»···)"
      @ function-block ;  5-Apr-1995 `function-block' instead of `block'
      ""
  )
)

(lse-define-fill-in "function-prototype-declaration"
  '(token)
  '(token           "fdecl"); 24-Jan-2002
  '(token           "prototype"); 24-Jan-2002
  '(description     "Declares a function prototype")
  '(replacement
      ""
      @ function-name-declaration & "(«proto-parameter-list»);"
      ""
  )
)

(lse-define-fill-in "GOTO"
  '(token)
  '(description     "Transfers control unconditionally to a labeled statement")
  '(replacement     "goto «label-name»;")
)

(lse-define-fill-in "int"
  '(token)
  '(description     "integer of default size")
  '(replacement     "int «declarator-and-initializer»")
)

(lse-define-fill-in "keyword"
    '(token)
    '(description           "Identifiers reserved for use as language keywords")
    '(sort)
    '(menu
        @ c-keyword
     )
;;; keyword
)

(lse-define-fill-in "label-name"
    '(description   "Name of a label")
;;; label-name
)

(lse-define-fill-in "labeled-statement"
    '(token)
    '(description           "Statement identified by a label")
    '(replacement
        lse-indent-1
        "  «label-name» : "
        lse-indent+1
        "«statement»;"
     )
;;; labeled-statement
)

(lse-define-fill-in "long"
  '(token)
  '(description     "long integer")
  '(replacement     "long «declarator-and-initializer»")
)

(lse-define-fill-in "LVALUE"
  '(description     "An expression referring to an object")
  '(menu
      identifier
      array-reference
      @ member-reference
      "* «expression»"
      "(«lvalue»)"
  )
)

(lse-define-fill-in "member-reference"
  '(menu
      "«primary» -> «identifier»"
      "«lvalue».«identifier»"
  )
)

(lse-define-fill-in "object-declaration"
    '(token)
    '(replacement
        "««static-or-extern»» "
           & @ object-type-declaration
           & "«declarator-and-initializer»;"
     )
;;; object-declaration
)

(lse-define-fill-in "object-type-declaration"
    '(replacement   "««object-type-modifier»» «data-type» ««pointer-or-reference»»")
;;; object-type-declaration
)

(lse-define-fill-in "Object-Type-Modifier"
  '(separator " ")
  '(menu
      const
      "volatile"
  )
)

(lse-define-fill-in "parameter-declaration"
  '(description           "Declaration of parameter for a function or template")
  '(separator             lse-newline (lse-align-to-pattern ",\\|(") ", ")
  '(leading               ",")
  '(replacement           @ type-definition)
;;; parameter-declaration
)

(lse-define-fill-in "pointer-declarator"
  '(description     "Declares a pointer to an object of the specified type")
  '(replacement     "* ««Object-Type-Modifier»»··· «declarator»")
)

(lse-define-fill-in "pointer-or-reference"
    '(menu
        ("*"     "Object is a pointer")
        ("&"     "Object is a reference")
     )
;;; pointer-or-reference
)

(lse-define-fill-in "Preprocessor-Directive"
  '(menu
      \#define
      \#include
      \#if
      \#ifdef
      \#ifndef
      \#undef
      \#else
  )
)

(lse-define-fill-in "primary"
  '(menu           @ c-primary)
;;; primary
)

(lse-define-fill-in "proto-parameter-list"
  '(description     "Declaration of parameter list for function prototype")
  '(menu
      "«parameter-declaration»···, ««ellipsis»»"
      "void"
   )
;;; proto-parameter-list
)

(lse-define-fill-in "short"
    '(token)
    '(description     "Short integer")
    '(replacement     "short «declarator-and-initializer»")
;;; short
)

(lse-define-fill-in "sizeof"
  '(description     "The size, in bytes, of some object")
  '(menu
      "sizeof «expression»"
      "sizeof («type-name»)"
  )
)

(lse-define-fill-in "statement"
  '(description     "A valid statement")
  '(separator       ";" lse-newline-and-indent)
  '(leading         "")
  '(trailing        ";")
  ;;  1-Jan-1999 ;; '(kill-action     lse-kill:join-sexp-boundary-maybe); 31-Dec-1997
  '(menu
      "«expression»;"
      break
      continue
      do
      for
      goto
      if
      labeled-statement
      return
      switch
      while
      ";"
  )
)

(lse-define-fill-in "static-or-extern"
  '(menu
      "static"
      "extern"
  )
)

(lse-define-fill-in "static"
  '(token)
  '(replacement     "static")
)

(lse-define-fill-in "struct"
    '(token)
    '(description   "Define a record type")
    '(replacement
        "struct ««identifier»» "
          & "««struct-member-declaration»» "
          & "««declarator-and-initializer»»;"
     )
;;; struct
)

(lse-define-fill-in "struct-member-declaration"
    '(description   "Define the structure of the struct")
    '(replacement
        ""
        "  {"
        lse-indent+1
        "««data-member-definition»»···"
        lse-indent-1
        "  } "
     )
;;; struct-member-declaration
)

(lse-define-fill-in "type-definition"
    '(replacement   @ object-type-declaration & " «declarator»")
;;; type-definition
)

(lse-define-fill-in "type-name"
    '(description   "Name of a data type")
;;; type-name
)

(lse-define-fill-in "typedef"
    '(token)
    '(description   "Declare an identifier that can be used later for naming types")
    '(replacement   "typedef " & @ type-definition)
;;; typedef
)

(lse-define-fill-in "typedef-name"
    '(description   "Name introduced by typedef declaration")
;;; typedef-name
)

(lse-define-fill-in "unary-expression"
  '(menu
      ("* «expression»"             "dereference value of «expression»")
      ("& «lvalue»"                 "address of «lvalue»")
      ("- «expression»"             "numeric negation of «expression»")
      ("! «expression»"             "logical negation of «expression»")
      ("~ «expression»"             "bitwise negation of «expression»")
      ("++«lvalue»"                 "pre-increment  «lvalue»")
      ("--«lvalue»"                 "pre-decrement  «lvalue»")
      ("«lvalue»++"                 "post-increment «lvalue»")
      ("«lvalue»--"                 "post-decrement «lvalue»")
      ("(«type-name») «expression»" "type-cast «expression» to «type-name»")
      @ sizeof
  )
)

(lse-define-fill-in "unary-operator"
    '(token)
    '(menu
        ("-"         "numeric negation")
        ("!"         "boolean negation")
        ("~"         "bitwise negation")
        ("++"        "increment operator: pre- or postfix"
                     "1 argument:  prefix  increment operator."
                     ""
                     "2 arguments: postfix increment operator."
                     "Second argument must be `int'. "
                     "Compiler passes `0' for this argument."
        )
        ("--"        "decrement operator: pre- or postfix"
                     "1 argument:  prefix  decrement operator."
                     ""
                     "2 arguments: postfix decrement operator."
                     "Second argument must be `int'. "
                     "Compiler passes `0' for this argument."
        )
        ("&"         "unary: address operator")
        ("*"         "unary: dereference operator")
     )
;;; unary-operator
)

(lse-define-fill-in "union"
    '(token)
    '(description   "Define a union type. The members of the union all occupy the same memory area, i.e., they overlay each other.")
    '(replacement
        "union «identifier» "
          & "««union-member-declaration»» "
          & "««declarator-and-initializer»»;"
     )
;;; union
)

(lse-define-fill-in "union-member-declaration"
    '(replacement   @ struct-member-declaration)
;;; union-member-declaration
)

(lse-define-fill-in "variable-declaration"
    '(token)
    '(leading               "")
    '(replacement
        @ object-type-declaration
        & " "
        & @ declarator-and-initializer
        & ";"
     )
;;; variable-declaration
)

(lse-define-fill-in "volatile"
  '(token)
  '(description     "Prevents object from being optimized")
  '(replacement     "volatile")
)


(lse-define-fill-in "#define"
    '(token                 "#define")
    '(description           "Define a preprocessor macro")
    '(replacement           "#define «identifier» ««text»»")
;;; #define
)

(lse-define-fill-in "#elif"
  '(token)
  '(description           "Elseif-clause of #if construction")
  '(replacement
      lse-no-indent
      "#elif «constant-expression»"
      "««text»»"
   )
;;; #elif
)

(lse-define-fill-in "#else"
  '(token)
  '(description           "Else-clause of #if construction")
  '(replacement
      lse-no-indent
      "#else"
      "««text»»"
   )
;;; #else
)

(lse-define-fill-in "#if"
    '(token)
    '(description           "Conditional compilation")
    '(replacement
        lse-no-indent
        "#if «constant-expression»"
        "««text»»"
        "««#elif»»"
        "««#else»»"
        "#endif // «constant-expression»"
     )
;;; #if
)

(lse-define-fill-in "#ifdef"
  '(token)
  '(description     "Compile conditionally depending on existence of identifier")
  '(replacement
      lse-no-indent
      "#ifdef «identifier-a»"
      "««text»»"
      "««#else»»"
      "#endif // «identifier-a»"
  )
)

(lse-define-fill-in "#ifndef"
  '(token)
  '(description     "Compile conditionally depending on non-existence of identifier")
  '(replacement
      lse-no-indent
      "#ifndef «identifier-a»"
      "««text»»"
      "««#else»»"
      "#endif // «identifier-a»"
  )
)

(lse-define-fill-in "#include"
  '(token)
  '(description           "Include a header file")
  '(replacement
      lse-no-indent
      "#include «#include-file»"
   )
;;; #include
)

(lse-define-fill-in "#include-file"
  '(menu
      ("\"«file-name».h\""     "Include file «file-name» from source directories")
      ("<«file-name».h>"       "Include file «file-name» from library directories")
   )
;;; #include-file
)

(lse-define-fill-in "#undef"
  '(token)
  '(description     "Undefine a preprocessor macro")
  '(replacement
      lse-no-indent
      "#undef «identifier»"
   )
)

; ««lse-define-fill-in»»···
