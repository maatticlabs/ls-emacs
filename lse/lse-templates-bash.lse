;-*- coding: iso-8859-15; -*-

(lse-define-fill-in "alias"
  '(description   "Define an abbreviation for a command(-list)")
  '(token)
  '(replacement   "alias ««alias-definition»»")
)

(lse-define-fill-in "alias-definition"
  '(description   "Establish correspondence between alias-name and alias-value")
  '(replacement   "«name» ««alias-value»»")
)

(lse-define-fill-in "alias-value"
  '(description   "Replacement for alias")
  '(replacement   "= '«command-in-group»···'")
)

(lse-define-fill-in "bash"
    '(description           "Root fill-in for bash language")
    '(replacement
        "#! /swing/bin/bash" ;;; 11-Feb-1997 /swing/bin/bash for /bin/bash
        "#««header-comment»»"
        "««command»»···"
     )
)

(lse-define-fill-in "bash-command"
  '(description           "Internal bash commands")
  '(token)
  '(separator             " ")
  '(menu
      alias
      bg
      bind
      break
      builtin
      case
      command-extern
      command-group
      command-group-in-subshell
      continue
      declare
      echo
      enable
      eval
      exec
      exit
      export
      fg
      for-loop
      function-definition
      hash
      help
      history
      if
      jobs
      kill
      let
      popd
      pushd
      pwd
      read
      readonly
      set
      shift
      source
      suspend
      test
      times
      trap
      type
      ulimit
      umask
      unalias
      unset
      until-loop
      wait
      while-loop
   )
; "bash-command"
)

(lse-define-fill-in "bg"
  '(description   "Start a process in background")
  '(replacement   "bg ««job-specification»»")
)

(lse-define-fill-in "bind"
  '(description   "Define function of terminal key")
  '(token)
  '(replacement   "bind «text»")
)

(lse-define-fill-in "break"
  '(description   "Terminate a for-, until- or while-loop")
  '(token)
  '(replacement   "break ««number»»")
)

(lse-define-fill-in "builtin"
  '(description   "Execute an internal shell command even if shadowed by a synonym")
  '(token)
  '(replacement   "builtin «bash-command»")
)

(lse-define-fill-in "case"
  '(description   "Bash case construct")
  '(token)
  '(replacement
      "case «text» in"
      lse-indent+1
      "«case-clause»···"
      lse-indent-1
      "esac"
   )
)

(lse-define-fill-in "case-clause"
  '(token)
  '(replacement
      "«case-pattern»··· ) "
      lse-indent+1
      "«command»···"
      ";;"
      lse-indent:<                      ;  5-Jan-1998 ; instead of lse-indent-1
   )
)

(lse-define-fill-in "case-pattern"
  '(description   "Pattern matched according to the rules used to match wildcards against filenames")
  '(separator     " | ")
  '(leading       "|")
)

(lse-define-fill-in "char-list"
  '(description   "List of character positions written as single numbers and ranges, in increasing order")
  '(replacement   @ "number-list")
)

(lse-define-fill-in "command"
  '(leading               (" *\\(;|&&|&|\\|\\||\n\\) *"))
  '(menu
      bash-command
      function-command
      unix-command
      unix-root-command
   )
; "command"
)

(lse-define-fill-in "command-extern"
  '(description   "Executes external command ignoring internal synonyms")
  '(token)
  '(replacement   "command «command»")
)

(lse-define-fill-in "command-group"
  '(description   "Group of commands executed inside active shell")
  '(token         "{")
  '(replacement   "{ «command-in-group»··· }")
)

(lse-define-fill-in "command-group-in-subshell"
  '(description   "Group of commands executed in subshell")
  '(token         "(")
  '(replacement   "( «command-in-group»··· )")
)

(lse-define-fill-in "command-in-group"
  '(separator     "; ")
  '(leading       ";")
  '(replacement @ command)
;;; command-in-group
)

(lse-define-fill-in "conditional-expression"
  '(menu
      ("-b «file-name»"     "True if file exists and is block-special")
      ("-c «file-name»"     "True if file exists and is character-special")
      ("-d «file-name»"     "True if file exists and is a directory")
      ("-e «file-name»"     "True if file exists")
      ("-f «file-name»"     "True if file exists and is a regular file")
      ("-g «file-name»"     "True if file exists and is set-group-id")
      ("-k «file-name»"     "True if file has its ``sticky'' bit set")
      ("-L «file-name»"     "True if file exists and is a symbolic link")
      ("-p «file-name»"     "True if file exists and is a named pipe")
      ("-r «file-name»"     "True if file exists and is readable")
      ("-s «file-name»"     "True if file exists and has a size greater than zero")
      ("-S «file-name»"     "True if file exists and is a socket")
      ("-t ««number»»"      "True if file ««number»» (default 1) is opened on a terminal")
      ("-u «file-name»"     "True if file exists and its set-user-id bit is set")
      ("-w «file-name»"     "True if file exists and is writable")
      ("-x «file-name»"     "True if file exists and is executable")
      ("-O «file-name»"     "True if file exists and is owned by the effective UID")
      ("-G «file-name»"     "True if file exists and is owned by the effective group id")
      ("«file-name» -nt «file-name»"     "True if file1 is newer than file 2 (modification date)")
      ("«file-name» -ot «file-name»"     "True if file1 is older than file 2")
      ("«file-name» -ef «file-name»"     "True if both files have the same device and inode numbers")
      ("-z «text»"          "True if the length of «text» is zero")
      ("-n «text»"          "True if the length of «text» is non-zero")
      ("«text» = «text»"    "True if the strings are equal")
      ("«text» != «text»"   "True if the strings are not equal")
      ("! «conditional-expression»"      "True if expression is false")
      ("«conditional-expression» -a «conditional-expression»"     "True if both expressions are true")
      ("«conditional-expression» -o «conditional-expression»"     "True if either expression is true")
      ("«number» «operator» «number»"                             "Arithmetic binary operator")
   )
)

(lse-define-fill-in "continue"
  '(description   "Start next iteration of loop")
  '(token)
  '(replacement   "continue ««number»»")
)

(lse-define-fill-in "declare"
  '(description   "Declare a shell variable and/or set it's attributes")
  '(token)
  '(replacement
      "declare ««declare-option»»··· ««variable-definition»»"
   )
)

(lse-define-fill-in "declare-option"
  '(separator             " ")
  '(menu
      ("-f" "Display functions only")
      ("-r" "Set variable to readonly")
      ("-x" "Mark variable for automatic export to all subshells")
      ("-i" "Define variable as integer (assigned values are computed arithmetically)")
      ("+f" "Disable f-option")
      ("+r" "Disable r-option")
      ("+x" "Disable x-option")
      ("+i" "Disable i-option")
   )
)

(lse-define-fill-in "echo"
  '(description   "Display arguments on standard output")
  '(token)
  '(replacement   "echo ««echo-option»»··· «text»")
)

(lse-define-fill-in "echo-option"
  '(separator             " ")
  '(menu
      ("-n" "Do not output a line-terminator")
      ("-e" "Interpret escape characters like \\a (alarm)")
   )
)

(lse-define-fill-in "elif"
  '(description   "Else-IF clause for IF command")
  '(token)
  '(token         "elseif")
  '(replacement
      "elif «command»"
      "then"
      lse-indent+1
      "«command»···"
      lse-indent:<                      ;  5-Jan-1998 ; instead of lse-indent-1
   )
)

(lse-define-fill-in "else"
  '(description   "Else clause of IF command")
  '(token)
  '(replacement
      "else"
      lse-indent+1
      "«command»···"
      lse-indent:<                      ;  5-Jan-1998 ; instead of lse-indent-1
   )
)

(lse-define-fill-in "enable"
  '(description   "Enable or disable builtin shell commands (allows execution of external commands instead of builtin version)")
  '(token)
  '(replacement
      "enable ««enable-option»» «bash-command»»···"
   )
)

(lse-define-fill-in "enable-option"
  '(separator             " ")
  '(menu
      ("-n" "disable the shell commands")
   )
)

(lse-define-fill-in "eval"
  '(description   "The args are read and concatenated together into a single command which is executed by the shell")
  '(token)
  '(replacement   "eval «text»")
)

(lse-define-fill-in "exec"
  '(description   "Replace shell by command given (without command just apply redirections to the shell)")
  '(token)
  '(replacement   "exec ««-»» «command»")
)

(lse-define-fill-in "exit"
  '(description   "Exits shell with given status or status of last command")
  '(token)
  '(replacement   "exit ««number»»")
)

(lse-define-fill-in "export"
  '(description   "Export variables to the environment of subsequently executed commands")
  '(token)
  '(replacement
      "export ««export-option»»··· ««variable-definition»»"
   )
)

(lse-define-fill-in "export-option"
  '(separator             " ")
  '(menu
      ("-n"   "Remove export property from variables named")
      ("-f"   "Names refer to functions instead of variables")
      ("-p"   "Print list of all exported names")
   )
)

(lse-define-fill-in "fd-option"
  '(separator             " ")
  '(menu
      ("-n"     "Disable verification after formatting")
   )
)

(lse-define-fill-in "floppy-device"
  '(menu
      ("/dev/fd0H1440"     "Drive A: 3.5 inches, 1440 KB capacity")
      ("/dev/fd0Q720"      "Drive A: 3.5 inches, 720  KB capacity")
   )
)

(lse-define-fill-in "fg"
  '(description   "Bring job to foreground")
  '(replacement   "fg ««job-specification»»")
)

(lse-define-fill-in "field-list"
  '(description   "List of fields written as single numbers and ranges, in increasing order")
  '(replacement   @ "number-list")
)

(lse-define-fill-in "for-loop"
  '(description   "Perform loop for all items given")
  '(token)
  '(replacement
      "for «name» ««in-word»»"
      @ "loop-body"
   )
)

(lse-define-fill-in "function-command"
  '(description   "Commands applicable only inside function definitions")
  '(menu
      local
      return
   )
)

(lse-define-fill-in "function-definition"
  '(description   "Define a named function")
  '(token)
  '(replacement
      "function «name» ()"
      "{"
      lse-indent+1
      "«command»···"
      lse-indent-1
      "}"
   )
)

(lse-define-fill-in "hash"
  '(description   "Remember location of named commands or forget all remembered locations")
  '(token)
  '(replacement   "hash ««hash-option»»")
)

(lse-define-fill-in "hash-option"
  '(separator             " ")
  '(menu
      ("-r"        "Forget all remembered locations")
      ("«name»···" "Remember commands named")
   )
)

(lse-define-fill-in "header-comment-language-specific"
    '(replacement   "««header-comment-parameters»»")
)

(lse-define-fill-in "help"
  '(description   "Provide short description of shell command")
  '(token)
  '(replacement   "help ««bash-command»»")
)

(lse-define-fill-in "history"
  '(description   "Display or manipulate command history")
  '(token)
  '(replacement
      "history ««history-option»» «file-name»"
   )
)

(lse-define-fill-in "if"
  '(description   "Conditional statement")
  '(token)
  '(replacement
      "if «command»"
      "then"
      lse-indent+1
      "«command»···"
      lse-indent-1
      "««elif»»"
      "««else»»"
      "fi"
   )
)

(lse-define-fill-in "in-word"
  '(replacement   "in «text»")
)

(lse-define-fill-in "jobs"
  '(description   "List jobs or execute a given command passing it job id")
  '(token)
  '(replacement
      "jobs ««jobs-option»»··· ««job-specification»»"
   )
)

(lse-define-fill-in "jobs-option"
  '(separator             " ")
  '(menu
      ("-l"           "List process ID in addition to normal information")
      ("-n"           "List only jobs which have changed status since last notified")
      ("-p"           "List only process ID of the job's process group leader")
      ("-x «command»" "Replace job-specification by ID and execute command")
   )
)

(lse-define-fill-in "job-specification"
  '(separator             " ")
  '(menu
      ("%+"      "Last job")
      ("%-"      "Next to last job")
      ("%«text»" "Job specified by number or name of command")
   )
)

(lse-define-fill-in "kill"
  '(description   "Send signal (default SIGTERM) to specified processes")
  '(token)
  '(replacement
      "kill ««kill-option»» ««pid | job-specification»»"
   )
)

(lse-define-fill-in "kill-option"
  '(separator             " ")
  '(menu
      ("-l"           "List all signals")
      ("-s «text»"    "Specify signal name or number with «text»")
      ("-SIGHUP"      "Terminal hangup")
      ("-SIGINT"      "Terminal interrupt")
      ("-SIGQUIT"     "Terminal quit (with a memory dump)")
      ("-SIGKILL"     "Kill immediately (cannot be caught by process)")
      ("-SIGTERM"     "Software termination")
   )
)

(lse-define-fill-in "let"
  '(description   "Evaluate all arithmetic expressions given and return 1 if last evaluates to 0")
  '(token)
  '(replacement   "let «arithmetic-expression»")
)

(lse-define-fill-in "local"
  '(description   "Create a local variable")
  '(token)
  '(replacement   "local ««variable-definition»»···")
)

(lse-define-fill-in "loop-body"
  '(description   "Used by for-, until- and while-loop")
  '(replacement
      "do"
      lse-indent+1
      "«command»···"
      lse-indent-1
      "done"
   )
)

(lse-define-fill-in "operator"
  '(menu
      ("-eq"     "equal")
      ("-ne"     "not-equal")
      ("-lt"     "less-than")
      ("-le"     "less-than-or-equal")
      ("-gt"     "greater-than")
      ("-ge"     "greater-than-or-equal")
   )
)

(lse-define-fill-in "pid | job-specification"
  '(menu
      ("«text»"         "Process ID")
      job-specification
   )
)

(lse-define-fill-in "popd"
  '(description   "Removes entries of the directory stack. With no arguments, removes the top directory and performs a cd to the new top directopry")
  '(token)
  '(replacement   "popd ««number»»")
)

(lse-define-fill-in "pushd"
  '(description   "Adds a directory to the top of the directory stack")
  '(token)
  '(replacement   "push ««pushd-option»»")
)

(lse-define-fill-in "pushd-option"
  '(separator             " ")
  '(menu
      ("««name»»"        "Name of new directory")
      ("+«number»"       "Rotates stack so that the nth directory is at the top (counted from the left  of the list shown by dirs)")
      ("-«number»"       "Rotates stack so that the nth directory is at the top (counted from the right of the list shown by dirs)")
   )
)

(lse-define-fill-in "read"
  '(description   "Read one line from std-input and assign first word to first name, second word to second name and so forth, with leftover words assigned to last name")
  '(token)
  '(replacement   "read ««read-option»» «name»···")
)

(lse-define-fill-in "read-option"
  '(separator             " ")
  '(menu
      ("-r"       "Do not ignore backslash-newline pairs")
   )
)

(lse-define-fill-in "readonly"
  '(description   "Mark shell variables or functions as readonly")
  '(replacement   "readonly ««readonly-option»»··· «name»···")
)

(lse-define-fill-in "readonly-option"
  '(separator             " ")
  '(menu
      ("-p"       "Print all readonly names")
      ("-f"       "Names apply to functions")
   )
)

(lse-define-fill-in "return"
  '(description   "Return from function")
  '(token)
  '(replacement   "return ««number»»")
)

(lse-define-fill-in "set"
  '(description   "Enable (-) or disable (+) options and set numbered parameters")
  '(token)
  '(replacement   "set ««set-option»»··· ««set-args»»")
)

(lse-define-fill-in "set-args"
  '(menu
      ("-- «text»"     "Set positional parameters to values given, even if some of them begin with a -")
      ("- «text»"      "Set positional parameters to values given. The -x and -v options are turned off")
      ("--"            "Unset positional parameters")
   )
)

(lse-define-fill-in "set-option"
  '(separator             " ")
  '(menu
      ("«+-»a"     "Automatically mark variables for export")
      ("«+-»e"     "Exit immediately if a simple command exits with non-zero status")
      ("«+-»f"     "Disable pathname expansion")
      ("«+-»h"     "Locate and remember function commands as functions are defined")
      ("«+-»k"     "All keyword arguments are placed in the environment of a command, not just those preceeding the command")
      ("«+-»m"     "Monitor mode. Job control is enabled (default for interactive shells)")
      ("«+-»n"     "Read commands but do not execute them (ignored for interactive shells)")
      ("«+-»o «set-option-name»"     "Set named option")
      ("«+-»t"     "Exit after reading and executing one command")
      ("«+-»u"     "Treat unset variables as an error when performing parameter expansion")
      ("«+-»v"     "Print shell input lines as they are read")
      ("«+-»x"     "After expanding each simple command, bash displays the expanded value of PS4, followed by the command and its expanded arguments")
      ("«+-»l"     "Save and restore the binding of name in a for name [in-word] command")
      ("«+-»d"     "Disable the hashing of commands that are looked up for execution")
      ("«+-»C"     "The effect is as if the shell command `noclobber=' had been executed")
      ("«+-»H"     "Enable ! style history substitution (enabled by default)")
   )
)

(lse-define-fill-in "set-option-name"
  '(separator             " ")
  '(menu
      ("allexport"     "Equivalent to -a")
      ("braceexpand"   "Shell performs curly brace expansion (on by default)")
      ("emacs"         "Use an emacs-style command line editing interface")
      ("errexit"       "Equivalent to -e")
      ("histexpand"    "Equivalent to -H")
      ("ignoreeof"     "Same effect as shell command `IGNOREEOF=10'")
      ("monitor"       "Equivalent to -m")
      ("noclobber"     "Equivalent to -C")
      ("noexec"        "Equivalent to -n")
      ("noglob"        "Equivalent to -f")
      ("nohash"        "Equivalent to -d")
      ("notify"        "Same effect as shell command `notify='")
      ("nounset"       "Equivalent to -u")
      ("verbose"       "Equivalent to -v")
      ("vi"            "Use a vi-style command line editing interface")
      ("xtrace"        "Equivalent to -x")
   )
)

(lse-define-fill-in "shell"
  '(description   "Name of shell (specify full path)")
)

(lse-define-fill-in "shift"
  '(description   "Rename the postional parameters ${n+1}... to ${1}..., where n is the argument given (default = 1)")
  '(token)
  '(replacement   "shift ««number»»")
)

(lse-define-fill-in "sigspec"
  '(description   "Name or number of signal")
)

(lse-define-fill-in "source"
  '(description   "Execute shell script in current environment (without forking)")
  '(token         "@")
  '(token)
  '(replacement   "source «file-name»")
)

(lse-define-fill-in "suspend"
  '(description   "Suspend the execution of this shell until it receives a SIGCONT signal")
  '(token)
  '(replacement   "suspend ««suspend-option»»")
)

(lse-define-fill-in "suspend-option"
  '(separator             " ")
  '(menu
      ("-f"     "Do not complain if this is a login shell; just suspend anyway")
   )
)

(lse-define-fill-in "test"
  '(description   "Return 0 or 1 depending on the evaluation of conditional expression")
  '(token)
  '(replacement   "test «conditional-expression»")
)

(lse-define-fill-in "times"
  '(description   "Print accumulated user and system times for the shell and subprocesses")
  '(token)   
  '(replacement   "times")
)

(lse-define-fill-in "trap"
  '(description   "The «command» is to be read and executed when the shell receives signal(s) «sigspec»")
  '(token)
  '(replacement   "trap ««command»» ««sigspec»»")
)

(lse-define-fill-in "type"
  '(description   "Show interpreation of name")
  '(token)
  '(replacement   "type ««type-all»» ««type-option»» ««name»»···")
)

(lse-define-fill-in "type-all"
  '(menu
      ("-all"     "Show all of the places that contain an execuatble «name»")
   )
)

(lse-define-fill-in "type-option"
  '(separator             " ")
  '(menu
      ("-type"     "Show type of entity «name» (alias, keyword, ...)")
      ("-path"     "Show path of command (for files). Shows hashed value!")
   )
)

(lse-define-fill-in "ulimit"
  '(description   "Control resources available to shell and to processes started by it")
  '(token)
  '(replacement   "ulimit ««ulimit-option»»···")
)

(lse-define-fill-in "ulimit-option"
  '(separator             " ")
  '(menu
      ("-S"                "Set soft limits (may be increased later)")
      ("-H"                "Set hard limit (cannot be increased once set)")
      ("-a"                "Report all current limits")
      ("-c ««number»»"     "Maximum size of core files created")
      ("-d ««number»»"     "Maximum size of a process's data segment")
      ("-f ««number»»"     "Maximum size of files created by the shell")
      ("-m ««number»»"     "Maximum resident set size")
      ("-s ««number»»"     "Maximum stack size")
      ("-t ««number»»"     "Maximum amount of cpu time (seconds)")
      ("-p"                "Pipe size in 512-byte blocks")
      ("-n"                "Maximum number of open file descriptors")
   )
)

(lse-define-fill-in "umask"
  '(description   "Set user file creation mask (numeric or symbolic value can be specified)")
  '(token)
  '(replacement
      "umask ««umask-option»» ««file-protection-mode»»"
   )
)

(lse-define-fill-in "umask-option"
  '(separator             " ")
  '(menu
      ("-S"     "Show protection mask in symbolic instead of octal form")
   )
)

(lse-define-fill-in "unalias"
  '(description   "Remove «name»··· from the list of defined aliases")
  '(token)
  '(replacement   "unalias ««unalias-option»» ««name»»···")
)

(lse-define-fill-in "unalias-option"
  '(separator             " ")
  '(menu
      ("-a"     "Remove all aliases")
   )
)

(lse-define-fill-in "unset"
  '(description   "Remove shell variable or function")
  '(token)
  '(replacement
      "unset ««unset-option»»··· ««name»»···"
   )
)

(lse-define-fill-in "unset-option"
  '(separator             " ")
  '(menu
      ("-f"     "Remove function")
      ("-v"     "Remove variable (default)")
   )
)

(lse-define-fill-in "until-loop"
  '(description   "Iterate loop until condition does hold")
  '(token)
  '(replacement   "until «command»" @ "loop-body")
)

(lse-define-fill-in "wait"
  '(description   "Wait for specified process and report its exit status")
  '(replacement   "wait ««pid | job-specification»»")
)

(lse-define-fill-in "while-loop"
  '(description   "Iterate loop as long as condition holds")
  '(token)
  '(replacement   "while «command»" @ "loop-body")
)

(lse-define-fill-in "variable-definition"
  '(description           "Definition of a shell variable")
  '(separator             " ")
  '(replacement           "«name» ««variable-value»»")
)

(lse-define-fill-in "variable-value"
  '(replacement   "= «text»")
)

(lse-define-fill-in "version-control"
  '(menu
      ("numbered"     "Number backups sequentially")
      ("existing"     "Number backups for files which already have numbered backups, simple for all others")
      ("simple"       "Always make simple (unnumbered) backups")
   )
)

