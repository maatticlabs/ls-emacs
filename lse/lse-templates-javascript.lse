;-*- unibyte: t; coding: iso-8859-1; -*-

;;;; Copyright (C) 2011 Mag. Christian Tanzer All rights reserved
;;;; Glasauergasse 32, A--1130 Wien, Austria. tanzer@swing.co.at
;;;; ****************************************************************************
;;;; This template is part of the LS-Emacs.
;;;;
;;;; This template is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This template is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this template. If not, see <http://www.gnu.org/licenses/>.
;;;; ****************************************************************************
;;;;
;;;;++
;;;; Name
;;;;    lse-templates-javascript
;;;;
;;;; Purpose
;;;;    Define LSE templates of LSE language javascript
;;;;
;;;; Revision Dates
;;;;    18-Jan-2011 (CT) Creation
;;;;    ««revision-date»»···
;;;;--

;;; 18-Jan-2011
(lse-define-fill-in "js-root"
    '(token)
    '(description           "Root template of LS-Emacs language javascript")
    '(replacement
        "/*"
        "**««header-comment»»"
        "*/"
        ""
        "«js-statement»···"
        "/* __END__ " & lse-insert-buffer-name-plus-extension & " */"
     )
;;; js-root
)

(lse-define-fill-in "argument"
  '(description           "Argument for a function call")
  '(separator             ", ")
  '(leading               ",")
  '(replacement           @ identifier)
;;; parameter-declaration
)

;;; 18-Jan-2011
(lse-define-fill-in "block"
    '(token)
    '(token                 "{")
    '(description           "Javascript block")
    '(replacement
        lse-prev-indent & lse-indent+1
        "{"
        lse-indent+1
        "««js-statement»»···"
        lse-indent-1
        "}"
        lse-indent-1
     )
;;; js-block
)

(lse-define-fill-in "declarator"
  '(separator         ", ")
  '(replacement       identifier)
)

;;; 18-Jan-2011
(lse-define-fill-in "function-expression"
    '(token                 "fun")
    '(token)
    '(description           "Define an anonymous function")
    '(replacement
        "function (««parameter-declaration»»···)"
        @ block
     )
;;; function
)

;;; 18-Jan-2011
(lse-define-fill-in "function-statement"
    '(token                 "def")
    '(token)
    '(description           "Define a named function")
    '(replacement
        "function «function-name» (««parameter-declaration»»···)"
        @ block
     )
;;; function
)

;;; 18-Jan-2011
(lse-define-fill-in "js-statement"
    '(token)
    '(separator       ";" lse-newline-and-indent)
    '(leading         "")
    '(trailing        ";")
    '(sort)
    '(menu
        "«expression»;"
        block
        elif
        else
        for
        function-statement
        if
        return
        scope
        var
        while
     )
;;; js-statement
)

(lse-define-fill-in "lvalue"
  '(description     "An expression referring to an object")
  '(menu
      identifier
      array-reference
      @ member-reference
  )
)

(lse-define-fill-in "member-reference"
  '(replacement
      "«lvalue».«identifier»"
  )
)

(lse-define-fill-in "parameter-declaration"
  '(description           "Declaration of parameter for a function")
  '(separator             ", ")
  '(leading               ",")
  '(replacement           @ identifier)
;;; parameter-declaration
)

;;; 18-Jan-2011
(lse-define-fill-in "scope"
    '(token)
    '(description
      "Use a function definition to hide objects and functions"
     )
    '(replacement
        "( function(««parameter-declaration»»···)"
        @ block
        ") (««argument»»···)"
     )
;;; scope
)

(lse-define-fill-in "unary-expression"
  '(menu
      ("- «expression»"             "numeric negation of «expression»")
      ("! «expression»"             "logical negation of «expression»")
      ("~ «expression»"             "bitwise negation of «expression»")
      ("++«lvalue»"                 "pre-increment  «lvalue»")
      ("--«lvalue»"                 "pre-decrement  «lvalue»")
      ("«lvalue»++"                 "post-increment «lvalue»")
      ("«lvalue»--"                 "post-decrement «lvalue»")
      ("typeof «expression»"        "type of «expression»")
      ("void «expression»"          "Evaluate «expression» and return undefined")
  )
)

(lse-define-fill-in "unary-operator"
    '(token)
    '(menu
        ("-"         "numeric negation")
        ("!"         "boolean negation")
        ("~"         "bitwise negation")
        ("++"        "increment operator: pre- or postfix"
                     "1 argument:  prefix  increment operator."
                     ""
                     "2 arguments: postfix increment operator."
                     "Second argument must be `int'. "
                     "Compiler passes `0' for this argument."
        )
        ("--"        "decrement operator: pre- or postfix"
                     "1 argument:  prefix  decrement operator."
                     ""
                     "2 arguments: postfix decrement operator."
                     "Second argument must be `int'. "
                     "Compiler passes `0' for this argument."
        )
     )
;;; unary-operator
)

(lse-define-fill-in "var"
    '(token)
    '(leading               "")
    '(replacement           "var " & @ declarator-and-initializer & ";")
;;; variable-declaration
)

;;;; __END__ lse-templates-javascript.lse
