;-*- unibyte: t; coding: iso-8859-1; -*-

;;;; Copyright (C) 2011 Mag. Christian Tanzer All rights reserved
;;;; Glasauergasse 32, A--1130 Wien, Austria. tanzer@swing.co.at
;;;; ****************************************************************************
;;;; This template is part of the LS-Emacs.
;;;;
;;;; This template is free software; you can redistribute it and/or modify
;;;; it under the terms of the GNU General Public License as published by
;;;; the Free Software Foundation; either version 2 of the License, or
;;;; (at your option) any later version.
;;;;
;;;; This template is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;;; GNU General Public License for more details.
;;;;
;;;; You should have received a copy of the GNU General Public License
;;;; along with this template. If not, see <http://www.gnu.org/licenses/>.
;;;; ****************************************************************************
;;;;
;;;;++
;;;; Name
;;;;    lse-templates-javascript
;;;;
;;;; Purpose
;;;;    Define LSE templates of LSE language javascript
;;;;
;;;; Revision Dates
;;;;    18-Jan-2011 (CT) Creation
;;;;    19-Jan-2011 (CT) Creation continued
;;;;    20-Jan-2011 (CT) Creation continued..
;;;;    21-Jan-2011 (CT) Creation continued...
;;;;    22-Jan-2011 (CT) Creation continued....
;;;;    23-Jan-2011 (CT) Creation continued.....
;;;;    ««revision-date»»···
;;;;--

;;; 18-Jan-2011
(lse-define-fill-in "js-root"
    '(token)
    '(description           "Root template of LS-Emacs language javascript")
    '(rcompletion-trailer   delete-blank-lines)
    '(replacement
        "//««header-comment»»"
        ""
        "«statement»···"
        ""
        "// __END__ " & lse-insert-buffer-name-plus-extension
     )
;;; js-root
)

;;; 22-Jan-2011
(lse-define-fill-in "alias-this"
    '(token)
    '(token                 "this")
    '(description
        "Define an alias for 'this' that can be used in closure"
     )
    '(replacement           "var «name» = this")
;;; alias-this
)

;;; 22-Jan-2011
(lse-define-fill-in "apply"
    '(token)
    '(token                 ".apply")
    '(description           "Apply a method with context as this")
    '(replacement
        lse-js:remove-period & ".apply («context», «array»)"
     )
;;; apply
)

(lse-define-fill-in "argument"
    '(description           "Argument for a function call")
    '(separator             ", ")
    '(leading               ",")
    '(replacement           @ identifier)
;;; argument
)

;;; 21-Jan-2011
(lse-define-fill-in "arg-object"
    '(description           "An argument that is a javascript object.")
    '(separator             ", ")
    '(leading               ",")
    '(replacement           @ object-literal)
;;; arg-object
)

;;; 20-Jan-2011
(lse-define-fill-in "array"
    '(description           "An array")
;;; array
)

(lse-define-fill-in "base"
    '(description           "Number base to use for integer conversion")
    '(separator             ", ")
    '(leading               ",")
    '(replacement           "10")
;;; base
)

(lse-define-fill-in "block-comment"
  '(description   "Block of comment statements")
  '(replacement
      "//+"
      "// «text»···"
      "//-"
  )
)

;;; 19-Jan-2011
(lse-define-fill-in "_block_head"
    '(replacement
        lse-indent+1
        "{"
        lse-indent+1
     )
;;; _block_head
)

;;; 19-Jan-2011
(lse-define-fill-in "_block_tail"
    '(replacement
        lse-indent-1
        "}"
        & lse-js:remove-semicolon
        lse-indent:<
     )
;;; _block_tail
)

;;; 21-Jan-2011
(lse-define-fill-in "boolean-value"
    '(leading               ",")
    '(menu
        "true"
        "false"
     )
;;; boolean-value
)

;;; 23-Jan-2011
(lse-define-fill-in "call"
    '(token)
    '(token                 ".call")
    '(description           "Call a method with context as this")
    '(replacement
        lse-js:remove-period & ".call («context», ««argument»»···)"
     )
;;; call
)

;;; 20-Jan-2011
(lse-define-fill-in "callback"
    '(leading               ",")
    '(separator             ", ")
    '(description           "A function be be called as callback.")
;;; callable
)

;;; 20-Jan-2011
(lse-define-fill-in "call-argument"
    '(separator             lse-newline-and-indent-1 ", ")
    '(leading               ",")
    '(replacement           @ expression)
;;; call-argument
)

;;; 20-Jan-2011
(lse-define-fill-in "code"
    '(description           "Javascript code in a string.")
;;; code
)

;;; 23-Jan-2002
(lse-define-fill-in "comment"
  '(token)
  '(token                 "inline-comment")
  '(token                 "//")
  '(description           "Inline comment")
  '(replacement
      "// «text» "
  )
)

;;; 23-Jan-2011
(lse-define-fill-in "constructor"
    '(token                 ".constructor")
    '(description           "Use constructor property of a javascript object")
    '(replacement           lse-js:remove-period & ".constructor")
;;; constructor
)

;;; 21-Jan-2011
(lse-define-fill-in "coordinates"
    '(token)
    '(description
        "An object containing the properties top and left, which are integers indicating the new top and left coordinates for the elements."
     )
    '(replacement           "{ top : «number», left : «number» }")
;;; coordinates
)

;;; 22-Jan-2011
(lse-define-fill-in "count"
    '(description           "Number of items to process")
;;; count
)

(lse-define-fill-in "declarator"
  '(separator         ", ")
  '(replacement       identifier)
)

;;; 22-Jan-2011
(lse-define-fill-in "delete"
    '(token)
    '(description           "Delete an object")
    '(replacement           "delete «expression»")
;;; delete
)

;;; 23-Jan-2011
(lse-define-fill-in "Error"
    '(token)
    '(description
        "Create an error object, argument specifies error message"
     )
    '(replacement           "new Error («argument»)")
;;; Error
)

;;; 22-Jan-2011
(lse-define-fill-in "finally"
    '(description           "Cleanup code that is executed in any case")
    '(replacement
        "finally"
        @ block
     )
;;; finally
)

;;; 22-Jan-2011
(lse-define-fill-in "for-in"
    '(token)
    '(token         "forin")
    '(description   "For-in loop")
    '(replacement
        "for («name» in «object»)"
        $ _block_head
        "if («object».hasOwnProperty («name»))"
        @ block
        $ _block_tail
     )
)

;;; 20-Jan-2011
(lse-define-fill-in "_function-call"
    '(token                 "(")
    '(replacement-vanguard  (lse-js:clean-closing ")"))
    '(replacement
        lse-js:indent-object-literal &
        "( «call-argument»···"
        lse-newline (lse-indent-to-pattern "(" 0 (lse-indent:level:environment))
        ")"
        & lse-js:catch-semicolon
     )
;;; _function-call
)

;;; 22-Jan-2011
(lse-define-fill-in "functional-constructor"
    '(token)
    '(token                 "class")
    '(description           "Define a function for constructing Objects")
    '(replacement
        "var «function-name» = "
        lse-indent+1
          "( function ()"
          $ _block_head
            "var proto = «object-literal»;"
            "var fun_con = function (««parameter-declaration»»···)"
              $ _block_head
                "var that = «object-literal»;"
                "that.prototype = proto;"
                "««statement»»···"
                "return that;"
              $ _block_tail ""
            "return fun_con;"
          $ _block_tail
        lse-newline-and-indent
        & ") ();"
        & lse-js:remove-semicolon
        ""
     )
;;; functional-constructor
)

;;; 18-Jan-2011
(lse-define-fill-in "function-literal"
    '(token)
    '(token                 "fun")
    '(description           "Define an anonymous function")
    '(replacement
        "function ««function-name»» (««parameter-declaration»»···)"
        lse-js:indent-function-literal &
        @ block
        & ";" & lse-js:remove-semicolon
     )
;;; function
)

;;; 18-Jan-2011
(lse-define-fill-in "function-statement"
    '(token)
    '(token                 "def")
    '(token                 "function")
    '(description           "Define a named function")
    '(replacement
        "var «function-name» = " & $ function-literal
     )
;;; function
)

;;; 23-Jan-2011
(lse-define-fill-in "has-own-property"
    '(token)
    '(token                 ".has-own-property")
    '(description
        "Returns true if object itself contains a with name"
     )
    '(replacement           lse-js:remove-period & ".hasOwnProperty («name»)")
;;; has-own-property
)

;;; 22-Jan-2011
(lse-define-fill-in "initializer"
    '(description           "Initialization value for variable/object")
    '(leading               "=")
    '(replacement           @ expression)
;;; initializer
)

;;; 23-Jan-2011
(lse-define-fill-in "is-finite"
    '(token)
    '(description           "Tests whether a value is a finite number")
    '(replacement           "isFinite («expression»)")
;;; is-finite
)

;;; 23-Jan-2011
(lse-define-fill-in "is-nan"
    '(token)
    '(description           "Tests whether a value is a number or not-a-number")
    '(replacement           "isNaN («expression»)")
;;; is-nan
)

;;; 23-Jan-2011
(lse-define-fill-in "Math."
    '(token)
    '(replacement-leading   "Math.")
    '(sort)
    '(menu
        ("E"                     "The constant e.")
        ("LN10"                  "The natural logarithm of 10.")
        ("LN2"                   "The natural logarithm of 2.")
        ("LOG10E"                "The base-10 logarithm of e.")
        ("LOG102"                "The base-10 logarithm of 2.")
        ("PI"                    "The constant pi.")
        ("abs («expression»)"    "Absolute value")
        ("acos («expression»)"   "Arc cosine")
        ("asin («expression»)"   "Arc sine")
        ("atan («expression»)"   "Arc tangent")
        ("ceil («expression»)"   "Closest integer that is greater equal the argument")
        ("cos («expression»)"    "Cosine")
        ("exp («expression»)"    "Power of e")
        ("floor («expression»)"  "Closest integer that is less equal the argument")
        ("log («expression»)"    "Natural logarithm")
        ("max («argument»···)"   "Maximum value of arguments")
        ("min («argument»···)"   "Minimum value of arguments")
        ("random ()"             "Pseudo-random number between 0.0 and 1.0")
        ("round («expression»)"  "Closest integer")
        ("sin («expression»)"    "Sine")
        ("srqt («expression»)"   "Square root")
        ("tan («expression»)"    "Tangent")
        ("atan2 («expression», «expression»)"  "Arc tangent of y/x")
        ("pow («expression», «expression»)"    "x to the power of y")
     )
;;; Math.
)

;;; 23-Jan-2011
(lse-define-fill-in "null"
    '(token)
    '(description           "Null value")
    '(replacement           "null")
;;; null
)

;;; 19-Jan-2011
(lse-define-fill-in "object-literal"
    '(token)
    '(description           "Define a new object as a literal")
    '(replacement
        lse-js:indent-object-literal &
        "{ ««object-property»»···"
        lse-newline (lse-indent-to-pattern "{" 0 (lse-indent:level:environment))
        "}"
        & lse-js:remove-semicolon
     )
;;; object-literal
)

;;; 20-Jan-2011
(lse-define-fill-in "_object-literal"
    '(token                 "{")
    '(replacement           @ object-literal  & (lse-js:clean-closing "\}"))
;;; _object-literal
)

;;; 19-Jan-2011
(lse-define-fill-in "object-property"
    '(auto-expand)
    '(separator             lse-newline-and-indent-1 ", ")
    '(leading               ",")
    '(replacement           "«object-property-name» : «expression»")
;;; object-property
)

;;; 19-Jan-2011
(lse-define-fill-in "object-property-name"
    '(description           "Literal name of an object property")
    '(rcompletion-trailer
        just-one-space
        (lse-align-to-pattern ":" nil t (+ lse@current-expansion-indent 15))
     )
;;; object-property-name
)

;;; 23-Jan-2011
(lse-define-fill-in "parse-float"
    '(token)
    '(description           "Convert a string to a float value")
    '(replacement           "parseFloat («expression»)")
;;; parse-float
)

;;; 23-Jan-2011
(lse-define-fill-in "parse-int"
    '(token                 ««token-name»»)
    '(description           "Convert a string to a integer value")
    '(replacement           "parseInt («expression», ««base»»)")
;;; parse-int
)

;;; 23-Jan-2011
(lse-define-fill-in "property-is-enumerable"
    '(token)
    '(token                 ".property-is-enumerable")
    '(description
        "Returns true if object has a property with name that would be enumerated in for/in"
     )
    '(replacement           ".propertyIsEnumerable")
;;; property-is-enumerable
)

;;; 18-Jan-2011
(lse-define-fill-in "statement"
    '(token)
    '(leading               "")
    '(separator             "; " lse-newline-and-indent)
    '(rcompletion-trailer   lse-js:catch-semicolon)
    '(sort)
    '(menu
        break
        case
        default
        delete
        do
        elif
        else
        for
        for-in
        function-statement
        if
        return
        scope
        switch
        throw
        try
        try-finally
        var
        while
        "«expression»;"
     )
;;; statement
)

(lse-define-fill-in "lvalue"
  '(description     "An expression referring to an object")
  '(menu
      identifier
      array-reference
      @ member-reference
  )
)

(lse-define-fill-in "member-reference"
  '(replacement
      "«lvalue».«identifier»"
  )
)

;;; 22-Jan-2011
(lse-define-fill-in "operator-equal"
    '(token)
    '(token                 "==")
    '(description           "Equality operator: is equal to")
    '(replacement           "===")
;;; operator-equal
)

;;; 22-Jan-2011
(lse-define-fill-in "operator-not-equal"
    '(token)
    '(token                 "!=")
    '(description           "Inequality operator: is not equal to")
    '(replacement           "!==")
;;; operator-not-equal
)

(lse-define-fill-in "parameter-declaration"
  '(description           "Declaration of parameter for a function")
  '(separator             ", ")
  '(leading               ",")
  '(replacement           @ identifier)
;;; parameter-declaration
)

;;; 22-Jan-2011
(lse-define-fill-in "position"
    '(description           "Position where operation should start")
;;; position
)

;;; 23-Jan-2011
(lse-define-fill-in "prototype"
    '(token                 ".prototype")
    '(description           "Use prototype property of a javascript object")
    '(replacement           lse-js:remove-period & ".prototype")
;;; prototype
)

;;; 18-Jan-2011
(lse-define-fill-in "scope"
    '(token)
    '(description
      "Use a function definition to hide objects and functions"
     )
    '(replacement
        "( function (««parameter-declaration»»···)"
        @ block
        ") (««argument»»···);"
        & lse-js:remove-semicolon
     )
;;; scope
)

;;; 22-Jan-2011
(lse-define-fill-in "throw"
    '(token)
    '(token                 "raise")
    '(description           "Raise an exception")
    '(replacement           "throw «expression»;" & lse-js:remove-semicolon)
;;; throw
)

;;; 23-Jan-2011
(lse-define-fill-in "to-string"
    '(token)
    '(token                 ".to-string")
    '(description           "Returns a string representing the object.")
    '(replacement           lse-js:remove-period & ".toString ()")
;;; to-string
)

;;; 22-Jan-2011
(lse-define-fill-in "try"
    '(token)
    '(description           "Exception handler")
    '(replacement
        "try"
        @ block
        "catch («name»)"
        @ block
        "««finally»»"
     )
;;; try
)

;;; 22-Jan-2011
(lse-define-fill-in "try-finally"
    '(token)
    '(token                 "finally")
    '(description
        "Specify a cleanup handler. The finally-clause is executed in any case."
     )
    '(replacement
        "try"
        @ block
        @ finally
     )
;;; try-finally
)

;;; 23-Jan-2011
(lse-define-fill-in "Type-Error"
    '(token)
    '(replacement           "new TypeError («argument»)")
;;; Type-Error
)

(lse-define-fill-in "unary-expression"
  '(menu
      ("- «expression»"             "numeric negation of «expression»")
      ("! «expression»"             "logical negation of «expression»")
      ("~ «expression»"             "bitwise negation of «expression»")
      ("++«lvalue»"                 "pre-increment  «lvalue»")
      ("--«lvalue»"                 "pre-decrement  «lvalue»")
      ("«lvalue»++"                 "post-increment «lvalue»")
      ("«lvalue»--"                 "post-decrement «lvalue»")
      ("typeof «expression»"        "type of «expression»")
  )
)

(lse-define-fill-in "unary-operator"
    '(token)
    '(menu
        ("-"         "numeric negation")
        ("!"         "boolean negation")
        ("~"         "bitwise negation")
        ("++"        "increment operator: pre- or postfix"
                     "1 argument:  prefix  increment operator."
                     ""
                     "2 arguments: postfix increment operator."
                     "Second argument must be `int'. "
                     "Compiler passes `0' for this argument."
        )
        ("--"        "decrement operator: pre- or postfix"
                     "1 argument:  prefix  decrement operator."
                     ""
                     "2 arguments: postfix decrement operator."
                     "Second argument must be `int'. "
                     "Compiler passes `0' for this argument."
        )
     )
;;; unary-operator
)

;;; 23-Jan-2011
(lse-define-fill-in "undefined"
    '(token)
    '(description           "Undefined value")
    '(replacement           "undefined")
;;; undefined
)

;;; 20-Jan-2011
(lse-define-fill-in "url"
    '(description           "A string containing a URL")
;;; value
)

(lse-define-fill-in "var"
    '(token)
    '(leading               "")
    '(replacement
        (line
            "var «name» = ««initializer»»;"
            lse-js:remove-semicolon
        )
     )
;;; variable-declaration
)

;;;; __END__ lse-templates-javascript.lse
